[
    // {
    //     "keys": ["<your shortucut>"],
    //     "command": "exec",
    //     "args": {
    //         "cmd": ["<path to your script>", "<script args>"]
    //     }
    // },
    /** Add curly brace at end of line */
    {
      "keys": ["ctrl+shift+["],
      "command": "run_macro_file",
      "args": {
        "file": "Packages/User/macros/eolbrace.sublime-macro"
      }
    },
  /*{
      "keys": ["ctrl+shift+]"],
      "command": "goto_definition"
    },*/
    /** Add semicolon at end of line */
    {
      "keys": ["ctrl+shift+;"],
      "command": "run_macro_file",
      "args": {
        "file": "Packages/User/macros/eolsemi.sublime-macro"
      }
    },
    /** Add comma at end of line */
    {
      "keys": ["ctrl+shift+,"],
      "command": "run_macro_file",
      "args": {
        "file": "Packages/User/macros/eolcomma.sublime-macro"
      }
    },
    /** Align and sort alphabetically */
    {
      "keys": ["ctrl+f9"],
      "command": "run_macro_file",
      "args": {
        "file": "Packages/User/macros/align-sort.sublime-macro"
      }
    },
    /** Close current html tag */
    {
      "keys": ["ctrl+."],
      "command": "insert_import",
    },
    // {
    //     "keys": ["ctrl+shift+."],
    //     "command": "typescript_organize_imports",
    // },
    {
      "keys": ["ctrl+shift+."],
      "command": "lsp_execute",
      "args": {
        "session_name": "LSP-typescript",
        "command_name": "_typescript.organizeImports",
        "command_args": ["${file}"]
      }
    },
    // {
    //   "keys": ["ctrl+shift+."],
    //   "command": "run_macro_file",
    //   "args": { "file": "Packages/User/macros/plint.sublime-macro" }
    // },
    /** Same as zl[tab] but retains selection */
    { "keys": ["ctrl+k", "l"],
      "command": "insert_snippet",
      "args": { "name": "Packages/User/snippets/conlog.sublime-snippet" }
    },
    // { "keys": ["ctrl+shift+]"],
    //   "command": "typescript_go_to_definition",
    //   "context": { "key": "selector", "operator": "equal", "operand": "text.html.markdown" }
    // },
    { "keys": ["ctrl+shift+]"], "command": "typescript_go_to_definition", "context":
      [ { "key": "selector", "operator": "equal", "operand": "source.ts,source.tsx" } ]
    },
    {
        "keys": ["ctrl+shift+]"],
        "command": "lsp_symbol_definition",
        "context": [
            { "key": "selector", "operator": "equal", "operand": "source.ts, source.js" }
        ]
    },
    {
      "keys": ["ctrl+shift+]"],
      "command": "goto_definition",
      "context": [
        { "key": "selector", "operator": "not_equal", "operand": "source.ts,source.tsx" }
      ]
    },
  { "keys": ["ctrl+v"], "command": "paste_and_indent" },
  { "keys": ["ctrl+shift+v"], "command": "paste" },
  { "keys": ["ctrl+shift+t"], "command": "reopen_tabs" },
  {
    "keys": ["alt+shift+1"],
    "command": "set_layout",
    "args":
    {
      "cols": [0.0, 1.0],
      "rows": [0.0, 1.0],
      "cells": [[0, 0, 1, 1]]
    }
  },
  { "keys": ["ctrl+shift+alt+2"], "command": "move_to_new_group", "args": {"group": 1} },
  { "keys": ["ctrl+shift+alt+1"], "command": "move_to_new_group", "args": {"group": 0} },
  { "keys": ["ctrl+b"], "command": "run_cmd", "args": { "command" : "gnome-terminal --working-directory='DIRNAME' '/bin/bash -il'" } },
  { "keys": ["ctrl+shift+b"], "command": "run_command_exec_prompt", "args": null },
  { "keys": ["ctrl+alt+shift+."], "command": "prettier", "args": null },
  { "keys": ["alt+shift+up"], "command": "select_lines", "args": { "forward": false } },
  { "keys": ["alt+shift+down"], "command": "select_lines", "args": { "forward": true } },
  { "keys": ["ctrl+enter"], "command": "run_macro_file", "args": {"file": "res://Packages/Default/Add Line.sublime-macro"} },
  { "keys": ["ctrl+alt+s"], "command": "save_all" },
  { "keys": ["alt+shift+e"], "command": "reveal_in_side_bar" },
  { "keys": ["alt+shift+d"], "command": "find_all_under" },
  { "keys": ["ctrl+h"], "command": "replace_in_sel", "args": null },
  { "keys": ["ctrl+f"], "command": "find_in_selection" },
    // { "keys": ["tab"], "command": "chain", "args": {
    //     "commands": [["expand_abbreviation_by_tab"], ["reg_replace", {"replacements": ["js_class"]}]]
    //   },
    //   "context": [
    //     {"operand": "source.js", "operator": "equal", "match_all": true, "key": "selector"},
    //     {"key": "preceding_text", "operator": "regex_contains", "operand": "(\\w+>\\w+|\\s(\\.?|a|div|span|p|button)\\.\\w+)", "match_all": true},
    //     {"key": "selection_empty", "operator": "equal", "operand": true, "match_all": true}
    //   ]
    // }
    {
      "keys": ["tab"],
      "command": "expand_abbreviation_by_tab",

        // put comma-separated syntax selectors for which
        // you want to expandEmmet abbreviations into "operand" key
        // instead of SCOPE_SELECTOR.
        // Examples: source.js, text.html - source
        "context": [
          {
            "operand": "source.jsx,source.tsx,text.html",
            "operator": "equal",
            "match_all": true,
            "key": "selector"
          },

            // run only if there's no selected text
            {
              "match_all": true,
              "key": "selection_empty"
            },

            // don't work if there are active tabstops
            {
              "operator": "equal",
              "operand": false,
              "match_all": true,
              "key": "has_next_field"
            },

            // don't work if completion popup is visible and you
            // want to insert completion with Tab. If you want to
            // expand Emmet with Tab even if popup is visible --
            // remove this section
            {
              "operand": false,
              "operator": "equal",
              "match_all": true,
              "key": "auto_complete_visible"
            },
            {
              "match_all": true,
              "key": "is_abbreviation"
            }
          ]
      },
      { "keys": ["ctrl+tab"], "command": "next_view" },
      { "keys": ["ctrl+shift+tab"], "command": "prev_view" },
      { "keys": ["ctrl+pagedown"], "command": "next_view_in_stack" },
      { "keys": ["ctrl+pageup"], "command": "prev_view_in_stack" },
    ]
